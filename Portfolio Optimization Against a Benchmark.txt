reset;


param n integer;

param XB {i in 1..n};
param var{i in 1..n,j in 1..n};
param phi >= 0 default 0;
param alpha{i in 1..n};


var X{i in 1..n};


maximize linear_combination:
sum{j in 1..n} alpha[j]*X[j];
subject to total: sum{j in 1..n} X[j] = 1;
subject to tracking_error:
sum{i in 1..n} (sum{j in 1..n} var[i,j]*(X[i]-XB[i])*(X[j]-XB[j])) <= phi^2;


data;
param n := 3;
param XB := 1 0.6 2 0.3 3 0.1;
param phi := 0.06;
param alpha :=
1 -0.03364599
2 0.05588277
3 0.03422764;

/* cov var matrix from python*/
param var: 1 2 3 :=
1 0.037449    0.0022731    0.0012915
2 0.002273    0.0105280    0.0001298
3 0.001291    0.0001298    0.0003392;


option solver loqo;
solve;
printf : "\nphi: %10.7f \n", phi;
printf: "\nOptimal Portfolio: \n";

printf {j in 1..n}: "%10.7f ", X[j];
printf: "\n\nMean, Variance: \n%10.7f %10.7f \n",
sum{j in 1..n} alpha[j]*X[j],
sum{i in 1..n} (sum{j in 1..n} var[i,j]*(X[i]-XB[i])*(X[j]-XB[j]));
